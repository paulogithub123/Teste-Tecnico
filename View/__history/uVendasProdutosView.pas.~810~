unit uVendasProdutosView;

interface

uses
  Winapi.Windows, Winapi.Messages, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls, Data.DB,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, Vcl.Grids, Vcl.DBGrids, Vcl.Buttons,
  uVendasProdutoControl, uVendasItensProdutoControl, Vcl.ToolWin, Vcl.ComCtrls, Vcl.Mask,
  FireDAC.Phys.MySQLWrapper;

type
  TfrmVendasProdutosView = class(TForm)
    Panel1: TPanel;
    Label1:
     TLabel;
    Label2: TLabel;
    Label3: TLabel;
    lblQtdItens: TLabel;
    Label5: TLabel;
    lblTotalItens: TLabel;
    GroupBox1: TGroupBox;
    Label7: TLabel;
    Label8: TLabel;
    edtCodCliente: TEdit;
    dsProdutoItens: TDataSource;
    FDMemProdutoGeral: TFDMemTable;
    FDMemProdutoItens: TFDMemTable;
    Label9: TLabel;
    edtNumPedido: TEdit;
    edtDtEmissao: TMaskEdit;
    dsProdutoGeral: TDataSource;
    edtNmCliente: TEdit;
    Panel4: TPanel;
    btnSalvarPedido: TBitBtn;
    Label10: TLabel;
    edtCodProduto: TEdit;
    edtNmProduto: TEdit;
    Label12: TLabel;
    edtQtde: TEdit;
    Label11: TLabel;
    mskEditVlUnit: TMaskEdit;
    btnCalcular: TBitBtn;
    mskEdtVlTotal: TMaskEdit;
    dbgItens: TDBGrid;
    btnGravaPedido: TBitBtn;
    btnPesquisar: TBitBtn;
    btnIncluir: TBitBtn;
    StatusBar1: TStatusBar;
    btnCancelar: TBitBtn;
    Panel2: TPanel;
    btnExcluir: TBitBtn;
    procedure FormShow(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btnCalcularClick(Sender: TObject);
    procedure btnSalvarPedidoClick(Sender: TObject);
    procedure btnGravaPedidoClick(Sender: TObject);
    procedure FDMemProdutoGeralAfterScroll(DataSet: TDataSet);
    procedure dbgItensColEnter(Sender: TObject);
    procedure dbgItensKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure edtCodClienteEnter(Sender: TObject);
    procedure edtCodClienteExit(Sender: TObject);
    procedure dbgItensKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure dbgItensCellClick(Column: TColumn);
    procedure edtCodProdutoExit(Sender: TObject);
    procedure mskEditVlUnitKeyPress(Sender: TObject; var Key: Char);
    procedure edtQtdeKeyPress(Sender: TObject; var Key: Char);
    procedure edtCodClienteKeyPress(Sender: TObject; var Key: Char);
    procedure edtCodProdutoKeyPress(Sender: TObject; var Key: Char);
    procedure btnPesquisarClick(Sender: TObject);
    procedure btnIncluirClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure btnExcluirClick(Sender: TObject);
  private
    { Private declarations }
    FVendasProdutoControl: TVendasProdutoControl;
    FVendasItensProdutoControl: TVendasItensProdutoControl;

    procedure CarregarProdutoGeralCod(ANum_Pedido : Integer);
    procedure CarregarEditsGeral;
    procedure HabilitaEditsPGeral;
    procedure LimpaEditsPGeral;

    procedure CarregarProdutoItens;
    procedure CarregarEditsItens;
    procedure HabilitaEditsPItens;
    procedure LimpaEditsPItens;
  public
    { Public declarations }
    iCodSeq : Integer;
    VCodExcluir : String;
    procedure BuscaNomeCliente(ACOD_CLI : Integer);
    procedure BuscaDescProduto(ACOD_PROD : Integer);
    procedure SomaVlItens(ANum_Pedido : Integer);
    Function VerificaRegItens(ANum_Pedido : Integer) : Boolean;
  end;

var
  frmVendasProdutosView: TfrmVendasProdutosView;

implementation

{$R *.dfm}

uses uEnumerado, uConexao, System.UITypes, System.SysUtils;

procedure TfrmVendasProdutosView.btnIncluirClick(Sender: TObject);
begin
  VCodExcluir := '';
  FVendasProdutoControl.VendasProdutoModel.Acao           := tacIncluir;
  FVendasItensProdutoControl.VendasItensProdutoModel.Acao := tacIncluir;

  btnGravaPedido.Enabled := FVendasItensProdutoControl.VendasItensProdutoModel.Acao = tacIncluir;
  btnCancelar.Enabled    := FVendasItensProdutoControl.VendasItensProdutoModel.Acao = tacIncluir;
  btnExcluir.Enabled     := FVendasItensProdutoControl.VendasItensProdutoModel.Acao = tacIndefinido;

  LimpaEditsPGeral;
  LimpaEditsPItens;

  if (FDMemProdutoGeral.Active) then
    FDMemProdutoGeral.EmptyDataSet;

  if (FDMemProdutoItens.Active) then
    FDMemProdutoItens.EmptyDataSet;

  HabilitaEditsPGeral;
  HabilitaEditsPItens;

  edtCodCliente.Enabled := True;
  edtCodCliente.SetFocus;

  edtNumPedido.Text     := IntToStr(FVendasProdutoControl.VendasProdutoModel.GerarCodigo(1));
  edtDtEmissao.Text     := DateTimeToStr(Now);
  lblTotalItens.Caption := '0,00';
end;

procedure TfrmVendasProdutosView.btnExcluirClick(Sender: TObject);
begin
  FVendasProdutoControl.VendasProdutoModel.Acao := tacExcluir;
  FVendasItensProdutoControl.VendasItensProdutoModel.Acao := tacExcluir;

  VCodExcluir := InputBox('Pesquisar', 'Digite o Número do Pedido a ser Excluído', EmptyStr);

  FVendasProdutoControl.VendasProdutoModel.Tipo := tacProd;
  FVendasItensProdutoControl.VendasItensProdutoModel.Tipo := tacNenhum;
  btnGravaPedido.Click;
end;

procedure TfrmVendasProdutosView.btnCalcularClick(Sender: TObject);
var fQtd, fVlUnit : Real;
begin
  if (FVendasItensProdutoControl.VendasItensProdutoModel.Acao IN [tacIncluir, tacAlterar]) then
  begin
    if (mskEditVlUnit.Text <> EmptyStr) and (edtQtde.Text <> EmptyStr) then
    begin
      fQtd    := StrToFloat(edtQtde.Text);
      fVlUnit := StrToFloat(mskEditVlUnit.Text);
      mskEdtVlTotal.Text := formatfloat('#,##0.00', fQtd * fVlUnit);
    end
    else
    begin
      ShowMessage('Informe a Qtde e/ou o Valor Unitário.');
      mskEditVlUnit.SetFocus;
    end;
  end;
end;

procedure TfrmVendasProdutosView.btnCancelarClick(Sender: TObject);
begin
  FVendasProdutoControl.VendasProdutoModel.Acao           := tacIndefinido;
  FVendasItensProdutoControl.VendasItensProdutoModel.Acao := tacIndefinido;

  LimpaEditsPGeral;
  LimpaEditsPItens;

  FDMemProdutoItens.Cancel;

  if (FDMemProdutoGeral.Active) then
    FDMemProdutoGeral.EmptyDataSet;

  if (FDMemProdutoItens.Active) then
    FDMemProdutoItens.EmptyDataSet;

  HabilitaEditsPGeral;
  HabilitaEditsPItens;
  btnIncluir.Enabled       := True;
  btnSalvarPedido.Enabled  := False;
  btnGravaPedido.Enabled   := False;
  btnCancelar.Enabled      := False;
end;

procedure TfrmVendasProdutosView.btnGravaPedidoClick(Sender: TObject);
var ICod : Integer;
begin
  if (VCodExcluir = '') then
    iCod := FDMemProdutoItens.Fields[1].AsInteger
  else
    iCod := StrToInt(VCodExcluir);

  if (FVendasItensProdutoControl.VendasItensProdutoModel.Acao = tacIncluir) or
     (FVendasProdutoControl.VendasProdutoModel.Acao           = tacIncluir) then
  begin
    FVendasProdutoControl.Salvar();

    if not (VerificaRegItens(ICod)) then
    begin
      FDMemProdutoItens.First;

      while not FDMemProdutoItens.Eof do
      begin
        FVendasItensProdutoControl.VendasItensProdutoModel.Num_Pedido     := FDMemProdutoItens.Fields[1].AsInteger;
        FVendasItensProdutoControl.VendasItensProdutoModel.Codigo_Produto := FDMemProdutoItens.Fields[2].AsInteger;
        FVendasItensProdutoControl.VendasItensProdutoModel.Vl_Unitario    := FDMemProdutoItens.Fields[5].AsFloat;
        FVendasItensProdutoControl.VendasItensProdutoModel.Quantidade     := FDMemProdutoItens.Fields[4].AsInteger;
        FVendasItensProdutoControl.VendasItensProdutoModel.Vl_Total       := FDMemProdutoItens.Fields[6].AsFloat;
        FVendasItensProdutoControl.Salvar();

        FDMemProdutoItens.Next;
      end;
    end
    else
    begin
      FVendasItensProdutoControl.VendasItensProdutoModel.Num_Pedido     := FDMemProdutoItens.Fields[1].AsInteger;
      FVendasItensProdutoControl.VendasItensProdutoModel.Codigo_Produto := FDMemProdutoItens.Fields[2].AsInteger;
      FVendasItensProdutoControl.VendasItensProdutoModel.Vl_Unitario    := FDMemProdutoItens.Fields[5].AsFloat;
      FVendasItensProdutoControl.VendasItensProdutoModel.Quantidade     := FDMemProdutoItens.Fields[4].AsInteger;
      FVendasItensProdutoControl.VendasItensProdutoModel.Vl_Total       := FDMemProdutoItens.Fields[6].AsFloat;
      FVendasItensProdutoControl.Salvar();
    end;

    ShowMessage('Incluido com sucesso.');
    FVendasItensProdutoControl.VendasItensProdutoModel.Acao := tacIndefinido;
    CarregarProdutoGeralCod(iCod);
  end
  else if (FVendasItensProdutoControl.VendasItensProdutoModel.Acao = tacExcluir) then
  begin
    CarregarProdutoGeralCod(iCod);

    if FVendasItensProdutoControl.VendasItensProdutoModel.Tipo = tacItem then
    begin
      if (VCodExcluir <> '') then
      begin
        FDMemProdutoItens.Edit;
        FDMemProdutoItens.Fields[0].AsInteger := StrToInt(VCodExcluir);
      end;

      FVendasItensProdutoControl.VendasItensProdutoModel.Codigo := FDMemProdutoItens.Fields[0].AsInteger;
      FVendasItensProdutoControl.Salvar();
    end;

    if FVendasProdutoControl.VendasProdutoModel.Tipo = tacProd then
    begin
      FVendasItensProdutoControl.VendasItensProdutoModel.Tipo := tacProd;

      FVendasProdutoControl.VendasProdutoModel.NumPedido            := iCod;
      FVendasItensProdutoControl.VendasItensProdutoModel.Num_Pedido := iCod;

      FVendasItensProdutoControl.Salvar();
      FVendasProdutoControl.Salvar();
    end;

    ShowMessage('Excluído com sucesso.');
    FVendasProdutoControl.VendasProdutoModel.Acao           := tacIndefinido;
    FVendasItensProdutoControl.VendasItensProdutoModel.Acao := tacIndefinido;

    CarregarProdutoGeralCod(iCod);
  end
  else if (FVendasItensProdutoControl.VendasItensProdutoModel.Acao = tacAlterar) then
  begin
    FVendasItensProdutoControl.Salvar();

    ShowMessage('Alterado com sucesso.');
    FVendasItensProdutoControl.VendasItensProdutoModel.Acao := tacIndefinido;

    dbgItens.Options := dbgItens.Options - [dgEditing];
  end;

  SomaVlItens(iCod);
  btnIncluir.Enabled      := True;
  btnSalvarPedido.Enabled := False;
  btnCancelar.Enabled     := False;
  btnGravaPedido.Enabled  := False;
  btnExcluir.Enabled      := True;
end;

procedure TfrmVendasProdutosView.btnPesquisarClick(Sender: TObject);
var VCodigo : String;
begin
  VCodigo := InputBox('Pesquisar', 'Digite o Número do Pedido', EmptyStr);

  SomaVlItens(StrToInt(VCodigo));
  CarregarEditsGeral;
  CarregarEditsItens;
  CarregarProdutoGeralCod(StrToInt(VCodigo));
end;

procedure TfrmVendasProdutosView.btnSalvarPedidoClick(Sender: TObject);
begin
  if (FDMemProdutoGeral.RecordCount = 0) then
  begin
    FDMemProdutoGeral.Append;
    FDMemProdutoGeral.Fields[0].AsString   := edtNumPedido.Text;
    FDMemProdutoGeral.Fields[1].AsString   := edtDtEmissao.Text;
    FDMemProdutoGeral.Fields[2].AsString   := edtCodCliente.Text;
    FDMemProdutoGeral.Fields[4].AsString   := '0';

    FVendasProdutoControl.VendasProdutoModel.Acao           := tacIncluir;
    FVendasProdutoControl.VendasProdutoModel.NumPedido      := StrToInt(edtNumPedido.Text);
    FVendasProdutoControl.VendasProdutoModel.DtEmissao      := StrToDateTime(edtDtEmissao.Text);
    FVendasProdutoControl.VendasProdutoModel.CodigoCliente  := StrToInt(edtCodCliente.Text);
    FVendasProdutoControl.VendasProdutoModel.VlTotal        := StrToFloat(mskEdtVlTotal.Text);
    FDMemProdutoGeral.Post;
  end;

  Inc(iCodSeq);

  if (FVendasItensProdutoControl.VendasItensProdutoModel.Acao = tacIncluir)  then
  begin
    FVendasItensProdutoControl.VendasItensProdutoModel.Num_Pedido     := StrToInt(edtNumPedido.Text);
    FVendasItensProdutoControl.VendasItensProdutoModel.Codigo_Produto := StrToInt(edtCodProduto.Text);
    FVendasItensProdutoControl.VendasItensProdutoModel.Quantidade     := StrToInt(edtQtde.Text);
    FVendasItensProdutoControl.VendasItensProdutoModel.Vl_Unitario    := StrToFloat(mskEditVlUnit.Text);
    FVendasItensProdutoControl.VendasItensProdutoModel.Vl_Total       := StrToFloat(mskEdtVlTotal.Text);

    FDMemProdutoItens.Append;
    FDMemProdutoItens.Fields[0].AsInteger := iCodSeq;
    FDMemProdutoItens.Fields[1].AsString  := edtNumPedido.Text;
    FDMemProdutoItens.Fields[2].AsString  := edtCodProduto.Text;
    FDMemProdutoItens.Fields[4].AsString  := edtQtde.Text;
    FDMemProdutoItens.Fields[5].AsString  := mskEditVlUnit.Text;
    FDMemProdutoItens.Fields[6].AsString  := mskEdtVlTotal.Text;
    FDMemProdutoItens.Post;
  end
  else if (FVendasItensProdutoControl.VendasItensProdutoModel.Acao IN [tacAlterar, tacExcluir]) then
  begin
    FVendasItensProdutoControl.VendasItensProdutoModel.Codigo         := FDMemProdutoItens.Fields[0].AsInteger;
    FVendasItensProdutoControl.VendasItensProdutoModel.Codigo_Produto := FDMemProdutoItens.Fields[2].AsInteger;
    FVendasItensProdutoControl.VendasItensProdutoModel.Num_Pedido     := FDMemProdutoItens.Fields[1].AsInteger;
    FVendasItensProdutoControl.VendasItensProdutoModel.Quantidade     := FDMemProdutoItens.Fields[4].AsInteger;
    FVendasItensProdutoControl.VendasItensProdutoModel.Vl_Unitario    := FDMemProdutoItens.Fields[5].AsFloat;
    FVendasItensProdutoControl.VendasItensProdutoModel.Vl_Total       := FDMemProdutoItens.Fields[4].AsInteger * FDMemProdutoItens.Fields[5].AsFloat;
  end;

  lblQtdItens.Caption   := IntToStr(FDMemProdutoItens.RecordCount);

  FVendasProdutoControl.VendasProdutoModel.Acao := tacIndefinido;
  LimpaEditsPItens;
  HabilitaEditsPGeral;

  btnIncluir.Enabled       := False;
  btnSalvarPedido.Enabled  := True;
  edtCodProduto.Enabled    := True;
  edtCodProduto.SetFocus;

  if (FVendasItensProdutoControl.VendasItensProdutoModel.Acao = tacIncluir) then
  begin
    FVendasProdutoControl.VendasProdutoModel.Acao := tacIncluir;
    SomaVlItens(FDMemProdutoItens.Fields[1].AsInteger);
  end;
end;

procedure TfrmVendasProdutosView.BuscaDescProduto(ACOD_PROD: Integer);
var
  VQry: TFDQuery;
begin
  VQry := TConexao.Create.CriarQuery();

  VQry.Close;
  VQry.SQL.Clear;
  VQry.SQL.Add(' select pro.DESC_PRO ');
  VQry.SQL.Add('   from PRODUTOS pro ');
  VQry.SQL.Add('  where pro.CODIGO_PRO = :PCODIGO_PRO ');
  VQry.Params.ParamByName('PCODIGO_PRO').AsInteger := ACOD_PROD;
  VQry.Open();

  if vQry.RecordCount > 0 then
    edtNmProduto.Text := VQry.FieldByName('DESC_PRO').AsString
  else
  begin
    ShowMessage('Produto não existe!');
    edtNmProduto.Clear;
    edtCodProduto.Clear;
    edtCodProduto.SetFocus;
  end;
end;

procedure TfrmVendasProdutosView.BuscaNomeCliente(ACOD_CLI : Integer);
var
  VQry: TFDQuery;
begin
  VQry := TConexao.Create.CriarQuery();

  VQry.Close;
  VQry.SQL.Clear;
  VQry.SQL.Add(' select cli.NOME_CLI ');
  VQry.SQL.Add('   from CLIENTE cli ');
  VQry.SQL.Add('  where cli.CODIGO_CLI = :PCODIGO_CLI ');
  VQry.Params.ParamByName('PCODIGO_CLI').AsInteger := ACOD_CLI;
  VQry.Open();

  if vQry.RecordCount > 0 then
    edtNmCliente.Text := VQry.FieldByName('NOME_CLI').AsString
  else
  begin
    edtNmCliente.Clear;
    edtCodCliente.Clear;
    edtCodCliente.SetFocus;
    ShowMessage('Cliente não existe!');
  end;
end;

procedure TfrmVendasProdutosView.CarregarProdutoGeralCod(ANum_Pedido: Integer);
var
  VQryP: TFDQuery;
begin
  FDMemProdutoGeral.Close;

  VQryP := FVendasProdutoControl.ObterPorCodigo(ANum_Pedido);
  try
    VQryP.FetchAll;
    FDMemProdutoGeral.Data := VQryP.Data;

  finally
    VQryP.Close;
    VQryP.Free;
  end;

  if (FVendasProdutoControl.VendasProdutoModel.Acao = tacIndefinido) then
  begin
    if (FDMemProdutoGeral.IsEmpty) then
    begin
      FDMemProdutoGeral.EmptyDataSet;

      if (FDMemProdutoItens.Active) then
        FDMemProdutoItens.EmptyDataSet;

      LimpaEditsPGeral;
      LimpaEditsPItens;
    end;
  end;

  if (FDMemProdutoGeral.RecordCount = 0) and (ANum_Pedido <> 999) and not (FVendasProdutoControl.VendasProdutoModel.Acao in [tacIncluir, tacIndefinido]) then
  begin
    ShowMessage('Pedido não encontrado!');
    Abort;
  end;
end;

procedure TfrmVendasProdutosView.CarregarProdutoItens;
var
  VQry: TFDQuery;
begin
  FDMemProdutoItens.Close;

  VQry := FVendasItensProdutoControl.ObterItem(FDMemProdutoGeral.Fields[0].AsInteger);
  try
    VQry.FetchAll;
    FDMemProdutoItens.Data := VQry.Data;
  finally
    VQry.Close;
    VQry.Free;
  end;
end;

procedure TfrmVendasProdutosView.dbgItensCellClick(Column: TColumn);
begin
  CarregarEditsItens;
end;

procedure TfrmVendasProdutosView.dbgItensColEnter(Sender: TObject);
var iCod : Integer;
begin
  if FVendasItensProdutoControl.VendasItensProdutoModel.Acao = tacAlterar then
  begin
    iCod := FDMemProdutoItens.Fields[1].AsInteger;

    if (dbgItens.Columns.Grid.SelectedField.FieldName = 'QUANTIDADE') or
       (dbgItens.Columns.Grid.SelectedField.FieldName = 'VL_UNITARIO') or
       (dbgItens.Columns.Grid.SelectedField.FieldName = 'VL_TOTAL')then
    begin
      FVendasProdutoControl.VendasProdutoModel.Acao           := tacIndefinido;

      btnSalvarPedido.Click();
      btnGravaPedido.Click();

      SomaVlItens(iCod);
      CarregarProdutoGeralCod(iCod);

      FVendasItensProdutoControl.VendasItensProdutoModel.Acao := tacIndefinido;
    end;
  end;
end;

procedure TfrmVendasProdutosView.dbgItensKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if (Key = VK_RETURN) then
  begin
    if (dbgItens.Columns.Grid.SelectedField.FieldName = 'QUANTIDADE') or
       (dbgItens.Columns.Grid.SelectedField.FieldName = 'VL_UNITARIO')then
    begin
      dbgItens.Options := dbgItens.Options + [dgEditing];
      FVendasItensProdutoControl.VendasItensProdutoModel.Acao := tacAlterar;
      FVendasProdutoControl.VendasProdutoModel.Acao           := tacIndefinido;
    end;
  end;

  if (Key = VK_DELETE) then
  begin
    if MessageDlg('Deseja realmente apagar o Item?', mtConfirmation, [mbyes,mbno],0) = mrYes then
    begin
      FVendasProdutoControl.VendasProdutoModel.Acao           := tacExcluir;
      FVendasItensProdutoControl.VendasItensProdutoModel.Acao := tacExcluir;

      FVendasItensProdutoControl.VendasItensProdutoModel.Tipo := tacItem;
      FVendasProdutoControl.VendasProdutoModel.Tipo           := tacNenhum;
      btnGravaPedido.Click();

      SomaVlItens(FVendasProdutoControl.VendasProdutoModel.NumPedido);
    end;
  end;
end;

procedure TfrmVendasProdutosView.dbgItensKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if FDMemProdutoItens.RecordCount > 0 then
    CarregarEditsItens;
end;

procedure TfrmVendasProdutosView.edtCodClienteEnter(Sender: TObject);
begin
  if edtCodCliente.Text <> EmptyStr then
    BuscaNomeCliente(StrToInt(edtCodCliente.Text));
end;

procedure TfrmVendasProdutosView.edtCodClienteExit(Sender: TObject);
begin
  if edtCodCliente.Text <> EmptyStr then
    BuscaNomeCliente(StrToInt(edtCodCliente.Text));
end;

procedure TfrmVendasProdutosView.edtCodClienteKeyPress(Sender: TObject;
  var Key: Char);
begin
  if ((Key in ['0'..'9'] = False) and (Word(Key) <> VK_BACK)) then
    Key := #0;
end;

procedure TfrmVendasProdutosView.edtCodProdutoExit(Sender: TObject);
begin
  if edtCodProduto.Text <> EmptyStr then
    BuscaDescProduto(StrToInt(edtCodProduto.Text));
end;

procedure TfrmVendasProdutosView.edtCodProdutoKeyPress(Sender: TObject;
  var Key: Char);
begin
  if ((Key in ['0'..'9'] = False) and (Word(Key) <> VK_BACK)) then
    Key := #0;
end;

procedure TfrmVendasProdutosView.edtQtdeKeyPress(Sender: TObject;
  var Key: Char);
begin
  if ((Key in ['0'..'9'] = False) and (Word(Key) <> VK_BACK)) then
    Key := #0;
end;

procedure TfrmVendasProdutosView.CarregarEditsGeral;
begin
  edtNumPedido.Text  := FDMemProdutoGeral.Fields[0].AsString;
  edtDtEmissao.Text  := FDMemProdutoGeral.Fields[1].AsString;
  edtCodCliente.Text := FDMemProdutoGeral.Fields[2].AsString;

  if edtNumPedido.Text <> EmptyStr then
  begin
    BuscaNomeCliente(StrToInt(edtCodCliente.Text));
  end;
end;

procedure TfrmVendasProdutosView.CarregarEditsItens;
begin
  if FDMemProdutoItens.RecordCount > 0 then
  begin
    edtCodProduto.Text := FDMemProdutoItens.Fields[2].AsString;
    mskEditVlUnit.Text := FDMemProdutoItens.Fields[5].AsString;
    edtQtde.Text       := FDMemProdutoItens.Fields[4].AsString;
    mskEdtVlTotal.Text := formatfloat('#,##0.00', StrToFloat(FDMemProdutoItens.Fields[6].AsString));

    if edtCodProduto.Text <> EmptyStr then
      BuscaDescProduto(StrToInt(edtCodProduto.Text));
  end;
end;

procedure TfrmVendasProdutosView.FDMemProdutoGeralAfterScroll(
  DataSet: TDataSet);
begin
  CarregarProdutoItens;
end;

procedure TfrmVendasProdutosView.FormCreate(Sender: TObject);
begin
  VCodExcluir := '';
  FVendasProdutoControl := TVendasProdutoControl.Create;
  FVendasItensProdutoControl := TVendasItensProdutoControl.Create;
end;

procedure TfrmVendasProdutosView.FormShow(Sender: TObject);
begin
  iCodSeq := 0;

  FVendasProdutoControl.VendasProdutoModel.Acao           := tacIndefinido;
  FVendasItensProdutoControl.VendasItensProdutoModel.Acao := tacIndefinido;

  StatusBar1.Panels[0].text := DateToStr(Date);
  Statusbar1.Panels[1].text := TimeToStr(Time);
  Statusbar1.Panels[2].text := 'TESTE TÉCNICO';

  CarregarProdutoGeralCod(999);
end;

procedure TfrmVendasProdutosView.HabilitaEditsPGeral;
begin
  edtNumPedido.Enabled  := FVendasProdutoControl.VendasProdutoModel.Acao = tacIncluir;
  edtDtEmissao.Enabled  := FVendasProdutoControl.VendasProdutoModel.Acao = tacIncluir;
  edtCodCliente.Enabled := FVendasProdutoControl.VendasProdutoModel.Acao = tacIncluir;
end;

procedure TfrmVendasProdutosView.HabilitaEditsPItens;
begin
  edtCodProduto.Enabled   := FVendasItensProdutoControl.VendasItensProdutoModel.Acao = tacIncluir;
  mskEditVlUnit.Enabled   := FVendasItensProdutoControl.VendasItensProdutoModel.Acao = tacIncluir;
  edtQtde.Enabled         := FVendasItensProdutoControl.VendasItensProdutoModel.Acao = tacIncluir;
  mskEdtVlTotal.Enabled   := FVendasItensProdutoControl.VendasItensProdutoModel.Acao = tacIncluir;
end;

procedure TfrmVendasProdutosView.LimpaEditsPGeral;
begin
  edtNumPedido.Clear;
  edtDtEmissao.Clear;
  edtCodCliente.Clear;
  edtNmCliente.Clear;
end;

procedure TfrmVendasProdutosView.LimpaEditsPItens;
begin
  edtCodProduto.Clear;
  edtNmProduto.Clear;
  mskEditVlUnit.Clear;
  edtQtde.Clear;
  mskEdtVlTotal.Clear;
end;

procedure TfrmVendasProdutosView.mskEditVlUnitKeyPress(Sender: TObject;
  var Key: Char);
begin
  if ((Key in ['0'..'9', ','] = False) and (Word(Key) <> VK_BACK)) then
    Key := #0;
end;

procedure TfrmVendasProdutosView.SomaVlItens(ANum_Pedido: Integer);
var
  VQry  : TFDQuery;
  fSoma : Real;
begin
  fSoma := 0;
  VQry := TConexao.Create.CriarQuery();

  VQry.Close;
  VQry.SQL.Clear;
  VQry.SQL.Add(' SELECT COUNT(pp.NUM_PEDIDO) QTDE, SUM(pp.VL_TOTAL) AS TOTAL ');
  VQry.SQL.Add('   FROM PEDIDO_PRODUTO pp ');
  VQry.SQL.Add('  WHERE pp.NUM_PEDIDO = :PNUM_PEDIDO ');
  VQry.Params.ParamByName('PNUM_PEDIDO').AsInteger := ANum_Pedido;
  VQry.Open();

  if VQry.FieldByName('QTDE').AsInteger > 0 then
  begin
    lblTotalItens.Caption := formatfloat('#,##0.00', VQry.FieldByName('TOTAL').AsFloat);
    lblQtdItens.Caption   := FloatToStr(VQry.FieldByName('QTDE').AsFloat);

    FVendasProdutoControl.VendasProdutoModel.Acao    := tacAlterar;
    FVendasProdutoControl.VendasProdutoModel.VlTotal := VQry.FieldByName('TOTAL').AsFloat;
    FVendasProdutoControl.Salvar();

    CarregarProdutoGeralCod(ANum_Pedido);
  end
  else
  begin
    if (FDMemProdutoItens.RecordCount > 0) then
    begin
      FDMemProdutoItens.First;

      while not (FDMemProdutoItens.Eof) do
      begin
        fSoma := fSoma + FDMemProdutoItens.Fields[4].AsInteger * FDMemProdutoItens.Fields[5].AsFloat;

        lblTotalItens.Caption := formatfloat('#,##0.00', fSoma);

        FDMemProdutoItens.Next;
      end;
    end
    else
    begin
      lblTotalItens.Caption := formatfloat('#,##0.00', fSoma);
      lblQtdItens.Caption   := '0';
    end;
  end;
end;

function TfrmVendasProdutosView.VerificaRegItens(ANum_Pedido: Integer): Boolean;
var
  VQry: TFDQuery;
begin
  VQry := TConexao.Create.CriarQuery();

  VQry.Close;
  VQry.SQL.Clear;
  VQry.SQL.Add(' SELECT COUNT(1) QTDE ');
  VQry.SQL.Add('   FROM PEDIDO_PRODUTO pp ');
  VQry.SQL.Add('  WHERE pp.NUM_PEDIDO = :PNUM_PEDIDO ');
  VQry.Params.ParamByName('PNUM_PEDIDO').AsInteger := ANum_Pedido;
  VQry.Open();

  Result := VQry.FieldByName('QTDE').AsInteger > 0;
end;

end.
